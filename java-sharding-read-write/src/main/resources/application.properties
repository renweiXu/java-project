## 应用名称
#spring.application.name=java-sharding
##spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
##spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#
## shardingjdbc 分片策略
## 配置数据源，给数据源起名称
#spring.shardingsphere.datasource.names=ds1
#
## 一个实体类对应多张表，覆盖
#spring.main.allow-bean-definition-overriding=true
#
##配置数据源具体内容
#spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds1.url=
#spring.shardingsphere.datasource.ds1.username=
#spring.shardingsphere.datasource.ds1.password=
#
#
##指定物理表 配置表在哪个数据库里面，表名称都是什么 grooy脚本 表名_$->{0..1}
#spring.shardingsphere.sharding.tables.xet_privacy_log.actual-data-nodes=ds1.xet_privacy_log_${0..1}
#
##指定数据库 表分片策略 根据 mobile 数据库和表都用这个字段分片 行表达式的策略
#spring.shardingsphere.sharding.tables.xet_privacy_log.database-strategy.inline.shardingColumn=mobile
## 算法表达式 根据mobile 取模  2 分片算法
#spring.shardingsphere.sharding.tables.xet_privacy_log.database-strategy.inline.algorithmExpression=xet_privacy_log_$->{mobile%2}
##spring.shardingsphere.sharding.tables.xet_privacy_log.database-strategy.standard.sharding-column=mobile
##spring.shardingsphere.sharding.tables.xet_privacy_log.table-strategy.standard.sharding-column=sharding_time
#
##数据库分片策略
##spring.shardingsphere.sharding.tables.money_flow.database-strategy.standard.preciseAlgorithmClassName=com.example.demo.config.PreciseDatabaseShardingAlgorithm
##spring.shardingsphere.sharding.tables.money_flow.database-strategy.standard.rangeAlgorithmClassName=com.example.demo.config.RangeDatabaseShardingAlgorithm
#
##数据表分片策略
##spring.shardingsphere.sharding.tables.money_flow.table-strategy.standard.preciseAlgorithmClassName=com.example.demo.config.PreciseTableShardingAlgorithm
##spring.shardingsphere.sharding.tables.money_flow.table-strategy.standard.rangeAlgorithmClassName=com.example.demo.config.RangeTableShardingAlgorithm
#
## 打开 sql 输出日志
#spring.shardingsphere.props.sql.show=true
#
#
